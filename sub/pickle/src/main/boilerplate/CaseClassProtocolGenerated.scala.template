package scbson.pickle.protocol

import scutil.lang.Fielder
import scutil.lang.Fielding
import scutil.lang.ISeq
import scbson.ast._
import scbson.pickle._
import BSONPickleUtil._

trait CaseClassProtocolGenerated {
	[2..#implicit def caseClassFormat1[[#S1:Format#],T:Fielding](apply:([#S1#])=>T, unapply:T=>Option[([#S1#])]):Format[T]	= {
		val ISeq([#k1#])	= Fielder[T]
		Format[T](
			(out:T)	=> {
				val fields	= unapplyTotal(unapply, out)
				BSONDocument.Var(
					[#k1 -> doWrite[S1](fields._1)#]
				)
			},
			(in:BSONValue)	=> {
				val map	= documentMap(in)
				apply([#doReadUnsafe[S1](map(k1))#])
			}
		)
	}
	#
	]
}
